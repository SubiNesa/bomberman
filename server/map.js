const getMap = () => {

    /*
    var level = [
        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [3, 2, 2, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 2, 3, 3, 3],
        [3, 2, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 2, 3],
        [3, 1, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3],
        [3, 1, 3, 3, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3],
        [3, 1, 2, 3, 2, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3],
        [3, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3],
        [3, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 3, 3],
        [3, 1, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [3, 1, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3],
        [3, 1, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3],
        [3, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3],
        [3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3],
        [3, 1, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3],
        [3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3],
        [3, 1, 2, 2, 3, 2, 3, 2, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3],
        [3, 1, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3],
        [3, 1, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3],
        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    ]

        - MIDLE OF CELL
    ------------------------------->
    { 16, 16 } { 48, 16 } { 64, 16 }
    { 16, 48 } [ 48, 48 ] [ 64, 48 ]
    { 16, 64 } [ 48, 64 ] [ 64, 64 ]

    */

    // build top external wall
    let rows = 18;
    let cols = 25;

    let level = [];
    let breakable = [];

    // black
    level[0] = [];
    let l1 = 0;
    while (l1 <= cols) {
        level[0].push(-1);
        l1++;
    }

    // briks
    level[1] = [];
    let l = 0;
    while (l <= cols) {
        level[1].push(3);
        l++;
    }

    breakable[0] = [];
    let b1 = 0;
    while (b1 <= cols) {
        breakable[0].push(-1);
        b1++;
    }
    breakable[1] = [];
    let b = 0;
    while (b <= cols) {
        breakable[1].push(-1);
        b++;
    }

    for (var r = 2; r <= rows; r++) {
        if (!level[r]) {
            level[r] = [];
            breakable[r] = [];
        }
        for (var c = 0; c <= cols; c++) {;
            if (c === 0 || c === 24) {
                // build external wall
                level[r][c] = 3;
                breakable[r][c] = -1;
            } else {
                if (c % 2 == 0 && r % 2 == 1) {
                    // wall
                    level[r][c] = 3;
                    breakable[r][c] = -1;
                } else {
                    // make sure to have free space from beginning
                    if (r == 2 && c == 1 || r == 2 && c == 2 || r == 3 && c == 1 ) {
                        // grace
                        level[r][c] = 2;
                        breakable[r][c] = -1;
                    } else if (r == 2 && c == 22 || r == 2 && c == 23 || r == 3 && c == 23) {
                        // grace
                        level[r][c] = 2;
                        breakable[r][c] = -1;
                    } else if (r == 17 && c == 1 || r == 18 && c == 2 || r == 18 && c == 1) {
                        // grace
                        level[r][c] = 2;
                        breakable[r][c] = -1;
                    } else if (r == 18 && c == 22 || r == 18 && c == 23 || r == 17 && c == 23) {
                        // grace
                        level[r][c] = 2;
                        breakable[r][c] = -1;
                    } else {
                        // random
                        let random = Math.floor(Math.random() * 2) + 1;
                        if (random == 1) {
                            // brick
                            breakable[r][c] = 1;
                            level[r][c] = 2;
                        } else {
                            // grace
                            level[r][c] = 2;
                            breakable[r][c] = -1;
                        }
                    }
                }
            }
        }
    }

    // build bottom external wall
    level[level.length] = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3];
    breakable[breakable.length] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];

    return { level, breakable }; 
}

module.exports = {
    getMap
}